#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
from PIL import Image, ImageDraw, ImageFont

CHARS_PER_LINE = 30


def quote2lines(line):
    "Split the quote into appropriately sized lines."

    words = line.split()
    lines = []
    cur_line = ''

    for word in words:
        if len(cur_line + ' ' + word) > CHARS_PER_LINE:
            lines.append(cur_line)
            cur_line = word
        elif cur_line != '':
            cur_line += ' ' + word
        else:
            cur_line = word

    if cur_line != '':
        lines.append(cur_line)

    return lines


# From http://blog.client9.com/2007/08/28/python-pil-and-png-metadata-take-2.html

def pngsave(im, file):
    "Save PNG image preserving metadata."

    reserved = ('interlace', 'gamma', 'dpi', 'transparency', 'aspect')

    # undocumented class
    from PIL import PngImagePlugin
    meta = PngImagePlugin.PngInfo()

    # copy metadata into new object
    for k,v in im.info.items():
        if k in reserved:
            continue

        meta.add_text(k, v, 0)

    im.save(file, "PNG", pnginfo=meta)


# handle inputs

description = """
Generate an image with a quote and a portrait. Perfect for fake quotes
attributed to famous people.

Several famous people come out of the box (selected by -p/--preset option):

- 'bismarck'       (Otto von Bismarck - this is also the default)
- 'churchill'      (Sir Winston Churchill)
- 'dulles'         (Allen Dulles)
- 'thatcher'       (Margareth Thatcher)
"""

parser = argparse.ArgumentParser(description=description,
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-p', '--preset', type=str, help='Preset to use')
parser.add_argument('-i', '--image', metavar='FILE', dest='portrait',
                    help='File with author\'s image')
parser.add_argument('-s', '--signature', dest='signature',
                    help='Author\'s signature')
parser.add_argument('-o', '--output', metavar='FILE', dest='output_file',
                    default='quote.png', help='Output file')
#parser.add_argument('quote', nargs='*')
parser.add_argument('quote', help='Actual quote to use')
args = parser.parse_args()

portrait_file = signature = None

if args.portrait:
    portrait_file = args.portrait

if args.signature:
    signature = args.signature

if args.preset == 'dulles':
    portrait_file = 'assets/dulles.jpg'
    signature = 'Аллен Даллес'

elif args.preset == 'churchill':
    portrait_file = 'assets/churchill.jpg'
    signature = 'Уинстон Черчилль'

elif args.preset == 'thatcher':
    portrait_file = 'assets/thatcher.jpg'
    signature = 'Маргарет Тэтчер'

elif not args.preset or args.preset == 'bismarck':
    if not portrait_file:
        portrait_file = 'assets/bismarck.jpg'

    if not signature:
        signature = 'Отто фон Бисмарк'

else:
    logging.fatal('No such preset')


# generate basic image

img = Image.new('RGB', (600, 400))
draw = ImageDraw.Draw(img)
draw.rectangle([(10, 10), (img.size[0] - 10, img.size[1] - 12)],
               outline='#BBBBBB')

picture = Image.open(portrait_file, 'r')
target_width = 200
target_height = int((float(target_width) / picture.size[0]) * picture.size[1])
picture = picture.resize((target_width, target_height))
xpos = img.size[0] - target_width - 30
ypos = int((img.size[1] - target_height) / 2)
img.paste(picture, (xpos, ypos))

font = ImageFont.truetype("assets/B52.ttf", 20)
font_sig = ImageFont.truetype("assets/B52.ttf", 16)
font_url = ImageFont.truetype("assets/FreeMono.ttf", 10)
quote_lines = quote2lines(args.quote)


# calculate vertical position of the block of text

y_delta = 5                     # extra spacing between lines
extra_sig_offset = 30
block_height = 0

for ii in range(len(quote_lines)):
    line = quote_lines[ii]
    block_height += draw.textsize(line, font=font)[1] + y_delta

block_height += draw.textsize(signature, font=font_sig)[1] + extra_sig_offset

if block_height > 340:
    logging.fatal('text is too large to fit on image')

y_offset = int((400 - block_height) / 2)
x_offset = 25


# render the quote

for ii in range(len(quote_lines)):
    line = quote_lines[ii]

    if ii == 0:
        line = '«' + line

    if ii == len(quote_lines) - 1:
        line += '»'

    draw.text((x_offset, y_offset), line, font=font)
    y_offset += draw.textsize(line, font=font)[1] + y_delta

x_offset += 120
y_offset += extra_sig_offset
draw.text((x_offset, y_offset), '-- ' + signature, font=font_sig)
draw.text((600 - 85, 400 - 12), 'goo.gl/wr9bgX', fill='#DDDD00', font=font_url)
del draw


# save image with metadata

project_url = 'https://github.com/abelikoff/shell-tools/tree/master/misc/quotegen'
img.info = { 'Author': 'Alexander L. Belikoff',
             'Source': project_url,
             'Comment': project_url }

#img.save(args.output_file)
pngsave(img, args.output_file)
