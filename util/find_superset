#!/bin/bash

#


readonly program_name=${0##*/}
readonly program_version=0.1

shopt -s failglob               # fail upon non-matched globs
#set -e                          # abort on first error
set -u                          # disallow undefined variables
set -o pipefail                 # fail the pipe if one component fails


usage() {
    echo "
    Usage:  ${program_name}  [options]

${program_name}


${program_name} supports the following options:

    -L <log_file>             - append log messages to log file.
    -d                        - debug mode.
    -v                        - verbose operation.
    -V                        - display program version.
    -h                        - display this message.

"
}


log() {
    local tag=${log_tag:-${program_name}}

    if [[ -n $log_file ]]; then
        echo "[$(date +"%Y/%m/%d %H:%M:%S %z")] [$tag] $*" >> $log_file
    else
        echo "$@"
    fi
}


verbose() {
    if [[ -n $verbose_mode ]]; then
        echo "$@"
    fi
}


debug() {
    if [[ -n $debug_mode ]]; then
        echo "$@"
    fi
}


error() {
    echo -e "${color_red}${program_name}: ERROR:" "$@" "${color_none}" >&2
}


fatal() {
    error "$@"
    exit 1
}


warning() {
    echo -e "${color_yellow}${program_name}: WARNING:" "$@" "${color_none}" >&2
}


notice() {
    echo -e "${color_cyan}${program_name}: NOTICE:" "$@" "${color_none}" >&2
}


cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}


setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    color_none='[0m' color_red='[0;31m' color_green='[0;32m'
    color_orange='[0;33m' color_blue='[0;34m' color_purple='[0;35m'
    color_cyan='[0;36m' color_yellow='[1;33m'
  else
    color_none='' color_red='' color_green='' color_orange='' color_blue=''
    color_purple='' color_cyan='' color_yellow=''
  fi

  readonly color_none color_red color_green color_orange color_blue \
    color_purple color_cyan color_yellow
}


which_is_superset() {
    file1="$1"
    file2="$2"

    if [[ $file1 == *.gz ]]; then
        cmd1=zcat
    else
        cmd1=cat
    fi

    if [[ $file2 == *.gz ]]; then
        cmd2=zcat
    else
        cmd2=cat
    fi

    out=$(diff <($cmd1 "$file1") <($cmd2 "$file2"))
    extra_content_in_file1=$(echo "$out" | grep -E '^<')
    extra_content_in_file2=$(echo "$out" | grep -E '^>')

    if [[ -n $extra_content_in_file1 && -z $extra_content_in_file2 ]]; then
        echo "$file1"
        return
    fi

    if [[ -z $extra_content_in_file1 && -n $extra_content_in_file2 ]]; then
        echo "$file2"
        return
    fi

    return
}

setup_colors

# parse options

verbose_mode=""
debug_mode=""
log_file=""
log_tag=""

while getopts ":dhL:Vv" opt; do
    case $opt in
        d)
            debug_mode=1
            set -o errtrace
            ;;

        h)
            usage
            exit 0
            ;;

        L)
            log_file=${OPTARG}
            ;;

        V)
            echo "${program_name} version ${program_version}"
            exit 0
            ;;

        v)
            verbose_mode=1
            ;;

        :)
            fatal "option '-${OPTARG}' requires an argument"
            ;;

        \?)
            fatal "unknown option: '-${OPTARG}'"
            ;;
    esac
done

readonly verbose_mode

shift $((OPTIND-1))

if [[ $# -lt 2 ]]; then
    usage
    exit 1
fi

superset="$1"
shift 1

for file in "$@"; do
    verbose "processing $file (superset is $superset)"
    result=$(which_is_superset "$superset" "$file")

    if [[ -z $result ]]; then
        error "Files seem to have mized content"
        exit 1
    fi

    superset="$result"
done

echo superset is $superset