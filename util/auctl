#!/bin/bash

# simple command-line tool for basic audio management
# (because pactl sucks)


readonly PROG=${0##*/}
readonly PROG_VERSION=0.1       # program version

shopt -s failglob               # fail upon non-matched globs
set -Eeuo pipefail              # paranoid mode (terminate on errors,
                                # pipe failures, unset variables)
shopt -s lastpipe               # required for '| read' idiom

if [[ -t 2 ]]; then
    ANSI_ERR="[91m"
    ANSI_WARN="[93m"
    ANSI_NOTICE="[92m"
    ANSI_OFF="[0m"
else
    ANSI_ERR=""
    ANSI_WARN=""
    ANSI_NOTICE=""
    ANSI_OFF=""
fi

readonly ANSI_ERR ANSI_WARN ANSI_NOTICE ANSI_OFF
readonly CONFIG_FILE=$HOME/.auctl.conf


# get device substring by alias

get_device_substring() {
    readonly device_alias=$1

    if [[ ! -f $CONFIG_FILE ]]; then
        fatal "Config file $CONFIG_FILE not found"
    fi

    awk '$1 == alias {print $2;}' alias=$device_alias $CONFIG_FILE
}


# find sink by name substring

get_sink() {
    readonly substring=$1

    pacmd list-sinks | awk '
BEGIN {
    sink = "none";
}

NF > 1 && $(NF-1) == "index:" {
    sink = $NF;
}

/^\t*name:.*'$substring'/ {
    print sink;
    exit;
}
' | read sink

    if [[ -n $sink && $sink != "none" ]]; then
        echo $sink
    fi
}


# find current sink

get_current_sink() {
    pacmd list-sinks | awk '
$1 == "*" && $2 == "index:" {
    print $3;
    exit;
}
'
}


# get current status (sink and volume)

get_status() {
    pacmd list-sinks | awk '
BEGIN {
    name = "";
    in_current = 0;
}

$1 == "*" && $2 == "index:" {
    in_current = 1;
}

$1 == "name:" && in_current {
    name = $2;
}

$1 == "volume:" && in_current {
    volume = $5;
    print(name, volume);
    exit;
}
' | read name volume

    if [[ -z $name || -z $volume ]]; then
        return
    fi

    if [[ ! -f $CONFIG_FILE ]]; then
        fatal "Config file $CONFIG_FILE not found"
    fi

    device_alias=$(awk 'index(name, $2) > 0 {print (NF > 2 ? $3 : $1);}' name=$name $CONFIG_FILE)
    echo $device_alias $volume
}


usage() {
    echo "
Usage:  ${PROG}  [options]  <command> [<arg(s)>]

${PROG} allows simple command-line autio management for PulseAudio-based systems.


COMMANDS
--------

Device switching:

  use-device  <alias>               - switch to audio device defined by <alias>

Volume management:

  set-volume  <alias>  <volume>     - change volume for device
  set-volume           <volume>     - change volume for current device

Muting:

  mute                              - mute current device
  unmute                            - unmute current device
  toggle-mute                       - toggle mute for current device

Information:

  status                            - show current device and volume level


CONFIGURATION
-------------

${PROG} uses aliases for each audio device of interest. Aliases are defined
in the configuration file $CONFIG_FILE the following way:

<alias>    <substring>    [<symbol>]

..where <substring> is a substring of a device name (as specified by
'pacmd list-sinks'). If <symbol> is specified, it will be used in \`status'
command output (ti simplify integration with window manager status tools).


${PROG} supports the following options:

    -n                        - dry run mode (just show commands)
    -v                        - verbose operation
    -h                        - display this message

"
}


verbose() {
    [[ -n $VERBOSE_MODE ]] && echo $@
}


error() {
    echo -e "${ANSI_ERR}${PROG}: ERROR:" $@ "${ANSI_OFF}" >&2
}


fatal() {
    error $@
    exit 1
}


warning() {
    echo -e "${ANSI_WARN}${PROG}: WARNING:" $@ "${ANSI_OFF}" >&2
}


notice() {
    echo -e "${ANSI_NOTICE}${PROG}: NOTICE:" $@ "${ANSI_OFF}" >&2
}


# parse options

VERBOSE_MODE=""
dryrun=""

while getopts ":hnv" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;

        n)
            dryrun="echo WILL RUN: "
            ;;

        v)
            VERBOSE_MODE=1
            ;;

        :)
            fatal "option '-${OPTARG}' requires an argument"
            ;;

        \?)
            fatal "unknown option: '-${OPTARG}'"
            ;;
    esac
done

readonly VERBOSE_MODE

shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

command=$1

if [[ $command == "use-device" ]]; then
    if [[ $# -ne 2 ]]; then
        fatal "Wrong syntax for '$command'"
    fi

    device_alias=$2
    device_pattern=$(get_device_substring $device_alias)

    if [[ -z $device_pattern ]]; then
        fatal "Unknown alias: $alias"
    fi

    sink=$(get_sink $device_pattern)

    if [[ -z $sink ]]; then
        fatal "Cannot find sink for device: $device_pattern"
    fi

    exec $dryrun pactl set-default-sink $sink
    exit 1

elif [[ $command == "set-volume" ]]; then
    if [[ $# -eq 2 ]]; then     # use current device
        sink=$(get_current_sink)
        volume="$2"
    elif [[ $# -eq 3 ]]; then   # use specific device
        device_alias="$2"
        device_pattern=$(get_device_substring $device_alias)

        if [[ -z $device_pattern ]]; then
            fatal "Unknown alias: $alias"
        fi

        sink=$(get_sink $device_pattern)
        volume="$3"
    else
        fatal "Wrong syntax for '$command'"
    fi

    if [[ -z $sink ]]; then
        fatal "Cannot determine sink"
    fi

    exec $dryrun pactl set-sink-volume $sink $volume
    exit 1

elif [[ $command == "mute" ]]; then
    sink=$(get_current_sink)

    if [[ -z $sink ]]; then
        fatal "Cannot determine current sink"
    fi

    exec $dryrun pactl set-sink-mute $sink 1
    exit 1

elif [[ $command == "unmute" ]]; then
    sink=$(get_current_sink)

    if [[ -z $sink ]]; then
        fatal "Cannot determine current sink"
    fi

    exec $dryrun pactl set-sink-mute $sink 0
    exit 1

elif [[ $command == "toggle-mute" ]]; then
    sink=$(get_current_sink)

    if [[ -z $sink ]]; then
        fatal "Cannot determine current sink"
    fi

    exec $dryrun pactl set-sink-mute $sink toggle
    exit 1

elif [[ $command == "status" ]]; then
    get_status
    exit 0

else
    usage
    exit 1
fi

exit 0
