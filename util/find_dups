#!/usr/bin/env python3
"""

find_dups lists all duplicate files in the directory specified.

By default, it compares files by size but if '-c' is specified, it further
checks files by MD5 checksum (which is slower but more precise).

"""

from collections import defaultdict
import hashlib
import os
import os.path
import sys
import argparse
import logging


__version__ = "1.0"


def main(args):
    "Main entry point."

    if len(args.directory) != 1:
        logging.fatal("No directory specified")
        sys.exit(1)

    top_dir = args.directory[0]
    file_sizes = get_duplicates_by_size(top_dir)

    for size in sorted(file_sizes.keys()):
        if args.do_checksum:
            by_checksum = defaultdict(list)

            for name in file_sizes[size]:
                md5 = hashlib.md5(open(name, "rb").read()).hexdigest()
                by_checksum[md5].append(name)

            for file_list in by_checksum.values():
                if len(file_list) < 2:
                    continue

                print("--- ", readable_size(size), " ", "-" * 50)

                for name in file_list:
                    print(name.replace(top_dir, ''))

        else:
            print("--- ", readable_size(size), " ", "-" * 50)

            for name in file_sizes[size]:
                print(name.replace(top_dir, ''))


def get_duplicates_by_size(top_dir):
    "Group duplicate files by size."

    dup_files = defaultdict(list) # size -> array of paths

    for root, _, files in os.walk(top_dir):
        for fname in files:
            path = os.path.join(root, fname)

            if os.path.islink(path):
                continue

            stat = os.stat(path)
            dup_files[stat.st_size].append(path)

    for size in list(dup_files.keys()):
        if len(dup_files[size]) < 2:
            del dup_files[size]

    return dup_files


def readable_size(num, suffix="B"):
    "Get human-readable size."

    for unit in ["", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"]:
        if abs(num) < 1024.0:
            return f"{num:3.1f} {unit}{suffix}"

        num /= 1024.0

    return f"{num:.1f} Yi{suffix}"


def _parse_args():
    "Parse command line args."

    parser = argparse.ArgumentParser(
        description=globals()["__doc__"],
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-D", "--debug", action="store_true",
                        dest="debug_mode", default=False,
                        help="debug mode")
    parser.add_argument("-c", "--checksum", action="store_true",
                        dest="do_checksum", default=False,
                        help="Compare based on checksum")
    parser.add_argument("-v", "--verbose", action="store_true",
                        dest="verbose_mode", default=False,
                        help="verbose mode")
    parser.add_argument("--version", action="version",
                        version="%(prog)s {version}".format(version=
                                                            __version__))
    parser.add_argument("directory", type=str, nargs=1,
                        help="Top directory")
    return parser.parse_args()


if __name__ == "__main__":
    OPTIONS = _parse_args()

    if OPTIONS.debug_mode:
        logging.basicConfig(level=logging.DEBUG,
                            format="%(levelname)s: %(message)s")
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s")

    main(OPTIONS)
    sys.exit(0)

# Local Variables:
# compile-command: "pylint -r n find_dups"
# end:
