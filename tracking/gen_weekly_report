#!/usr/bin/env python

""" Generate weekly report from time log.
"""


import datetime
from collections import defaultdict
import re
import os
import os.path
import logging
import sys
from optparse import OptionParser


usage_string = """Usage:  %prog [options] [YYYY/MM/DD]

%prog processes time log file and generates a weekly report
either for current week or for the week to which the date specified belongs.
"""

TRACK_FILE=os.path.join(os.getenv('HOME'), '.time-track.log')


prog = os.path.basename(sys.argv[0])
program_version = 1.0
version_string = "%%prog  %s" % program_version

logging.basicConfig(format = "%(asctime)s  " + prog +
                    ": %(levelname)s: %(message)s")


# parse command-line options

parser = OptionParser(usage = usage_string,
                      version = version_string)
#parser.add_option("-l", "--log",
#                  help = "redirect output to a log file",
#                  metavar = "FILE", dest = "log_file")
parser.add_option("-a", "--all", help = "display all categories",
                  action = "store_true", dest = "all_categories")
parser.add_option("-v", "--verbose", help = "verbose operation",
                  action = "store_true", dest = "verbose_mode")

(options, args) = parser.parse_args()

if options.verbose_mode:
    logging.getLogger().setLevel(logging.DEBUG)
else:
    logging.getLogger().setLevel(logging.INFO)

as_of_date = datetime.datetime.today()

if len(args) == 1:
    as_of_date = None

    for fmt in ["%Y/%m/%d", "%m/%d/%Y", "%m/%d"]:
        try:
            as_of_date = datetime.datetime.strptime(args[0], fmt)
            break
        except:
            pass
elif len(args) != 0:
    parser.print_help()
    sys.exit()

if not as_of_date:
    logging.fatal('Bad as-of date: ' + args[0])
    sys.exit(1)

# derive start and end of the week
as_of_date = datetime.date(as_of_date.year, as_of_date.month, as_of_date.day)
wkday = as_of_date.weekday()
week_start = as_of_date + datetime.timedelta(days=-wkday)
week_end = as_of_date + datetime.timedelta(days=6-wkday)

activities = defaultdict(list)
hours = defaultdict(int)

with open(TRACK_FILE, 'r') as fin:
    for line in fin:
        rec = [x.strip() for x in line.split(' | ')]

        if len(rec) != 5:
            continue

        # only process records for week in question

        try:
            rec_date = datetime.datetime.strptime(rec[0], "%m/%d/%Y").date()
        except:
            continue

        if rec_date < week_start or rec_date > week_end:
            continue

        activities[rec[2]].append(rec[4])
        hours[rec[2]] = hours[rec[2]] + int(rec[1])


# output summary report

for key in activities.keys():

    # skip personal categories
    if key == 'Personal':
        if not options.all_categories:
            continue;

    print('%s\n%s\n' % (key, '=' * len(key)))

    for outcome in activities[key]:
        if options.verbose_mode:
            print('* _(%dh)_ %s.' % (round(hours[key] / 60.0), outcome))
        else:
            print('* %s.' % outcome)

    print('\n')

sys.exit()


# Local Variables:
# compile-command: "pylint -r n gen-snippets"
# end:
