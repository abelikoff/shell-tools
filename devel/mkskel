#!/usr/bin/env python3

# create a basic skeleton of a *sh, perl, C, or C++ program


# Copyright (c) 1995-2017, Alexander L. Belikoff ( http://belikoff.net )
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name of the <ORGANIZATION> nor the names of its
#       contributors may be used to endorse or promote products
#       derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


import re
import os
import os.path
import logging
import sys
from optparse import OptionParser


pre_templates = {}
post_templates = {}

# templates

pre_templates['perl'] = """#!/usr/bin/perl -w

#


use strict;
use Getopt::Long;
use File::Basename;

use constant EXIT_SUCCESS => 0;
use constant EXIT_FAILURE => 1;

my $prog = basename $0;
my $version = undef;         # program version (RCS revision if undefined)


# prototypes

sub usage();
sub warning(@);
sub error(@);
sub fatal(@);
sub debug(@);
sub verbose(@);


# unbuffer the output

my $oldfh = select(STDERR); $| = 1;
select(STDOUT); $| = 1; select($oldfh);

# parse options

my %opts;
Getopt::Long::Configure("require_order");
Getopt::Long::Configure("no_ignore_case");
unless (GetOptions(\%opts,
                   "debug|d",
                   "help|h|?",
                   "verbose|v",
                   "version|V")) {
    usage();
    exit EXIT_FAILURE;
}

if ($opts{help}) {
    usage();
    exit EXIT_SUCCESS;
}

my $do_verbose = $opts{verbose};
my $do_debug = $opts{debug};

if ($opts{version}) {
    unless ($version) {
        $version = q/$""" + """Revision: 0.0 $/;
        $version =~ s/\$.evision:\s*(\S*)\s*\$$/$1/;
    }

    print "$prog $version\\n";
    exit EXIT_SUCCESS;
}

unless (@ARGV == 1) {
    usage();
    exit EXIT_FAILURE;
}

my @lt = localtime();
my $dtag = ($lt[5] + 1900) . ($lt[4] + 1) . "$lt[3]-$lt[2]$lt[1]$lt[0]";
my $TMPDIR = $ENV{TMPDIR} || (-d "/usr/tmp" ? "/usr/tmp" : "/tmp");


"""

post_templates['perl'] = """

exit EXIT_SUCCESS;


sub warning(@)
{
    print STDERR "$prog: WARNING: @_\\n";
}


sub error(@)
{
    print STDERR "$prog: ERROR: @_\\n";
}


sub fatal(@)
{
    error "@_";
    exit EXIT_FAILURE;
}


sub debug(@)
{
    print "DEBUG: " . (caller(0))[0] . ":" . (caller(0))[2] . ": @_\\n"
        if $do_debug;
}


sub verbose(@)
{
    print "@_\\n" if $do_verbose;
}


sub usage()
{
    print "
Usage:    $prog  [options]

$prog


$prog supports the following options:

    --verbose, -v          - verbose mode
    --debug, -d            - debug mode
    --version, -V          - display program version
    --help, -h             - show this help screen

";
}

"""

pre_templates['c'] = """/** @file @@@filename@@@ */

#ifndef lint
static const char RCSid[] = "$""" + """Id$";
#endif


"""

post_templates['c'] = "\n"

pre_templates['h'] = """/** @file @@@filename@@@ */

#ifndef INCLUDED_@@@ucppname@@@
#define INCLUDED_@@@ucppname@@@

#ifdef __cplusplus
extern "C" {
#endif

#ifndef lint
static const char @@@cppname@@@_RCSid[] = "$""" + """Id$";
#endif
"""

post_templates['h'] = """

#ifdef __cplusplus
}
#endif

#endif /* INCLUDED_@@@ucppname@@@ */
"""

pre_templates['c++'] = """/// @file @@@filename@@@

#ifndef lint
static const char RCSid[] = "$""" + """Header$";
#endif


"""

post_templates['c++'] = "\n"

pre_templates['h++'] = """/// @file @@@filename@@@

#ifndef INCLUDED_@@@ucppname@@@
#define INCLUDED_@@@ucppname@@@

#ifndef lint
static const char @@@cppname@@@_RCSid[] = "$""" + """Header$";
#endif
"""

post_templates['h++'] = """

#endif // INCLUDED_@@@ucppname@@@
"""

pre_templates['cmain'] = """/** @file @@@filename@@@
 *
 *
 */

#ifndef lint
static char RCSid[] = "$Header$";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/* #include "app_version.h" */


static char program_name[128] = ""; /* program name */
static int verbose_mode = 0;


static void
usage(void)
{
    fprintf(stderr, "Usage:  %s  [options]  <arg>\\n\\n"
           "  -V            show version\\n"
           "  -v            verbose mode\\n"
           "  -h            show this screen\\n",
           program_name);
}


int
main(int argc, char* argv[])
{
    char options[] = "hVv";
    int oc;
    char* p;

#ifndef __DGUX__
    extern char* optarg;        /* for getopt(3) */
    extern int optind, opterr, optopt;
#endif

    p = strrchr(argv[0], '/');
    strncpy(program_name, ((p == NULL) ? argv[0] : p + 1),
            sizeof(program_name));
    program_name[sizeof(program_name) - 1] = '\\0';


    /* parse the command line */

    while ((oc = getopt(argc, argv, options)) != EOF) {
        switch (oc) {
        case 'h':               /* help message */
            usage();
            exit(EXIT_SUCCESS);

        case 'V':               /* version number */
            /* printf("%s version %s (build %d)\\n\\n"
                   "Built by %s in %s:%s on %s\\n",
                   program_name, APP_VERSION_STRING, APP_VERSION_BUILD,
                   APP_BUILDER, APP_BUILD_HOST, APP_BUILD_PATH,
                   APP_BUILD_TIME); */
            exit(EXIT_SUCCESS);

        case 'v':               /* verbose mode */
            verbose_mode = 1;
            break;

        case '?':
        default:
            usage();
            exit(EXIT_FAILURE);
        }
    }

    if (optind != argc - 1) {
        usage();
        exit(EXIT_FAILURE);
    }
"""

post_templates['cmain'] = """
    exit(EXIT_SUCCESS);
}
"""

pre_templates['c++main'] = """/// @file @@@filename@@@

#ifndef lint
static const char RCSid[] = "$""" + """Id$";
#endif

#include <iostream>
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <cstring>

#include "app_version.h"


using namespace std;


static string program_name;     // program name
static bool verbose_mode = false;


static void
usage()
{
    cout << "\\nUsage:  " << program_name << "  [options]  <arg>\\n\\n"
//       << "  -d <num>      set debug level\\n"
         << "  -V            show version\\n"
         << "  -v            verbose mode\\n"
         << "  -h            show this screen\\n";
}


int
main(int argc, char* argv[])
{
    int oc;
    char options[] = "hVv";
    char* p;

    p = strrchr(argv[0], '/');
    program_name = (p == NULL) ? argv[0] : p + 1;


    // parse the command line

    while ((oc = getopt(argc, argv, options)) != EOF) {
        switch (oc) {
#if 0
        case 'd':.
            {
                istringstream is(optarg);
                int val;

                if (!(is >> val) || val <= 0) {
                    cerr << program_name << ": ERROR: bad value: '"
                         << optarg << "'\\n"
                    exit(EXIT_FAILURE);
                }
            }

            break;
#endif

        case 'h':               // help screen
            usage();
            exit(EXIT_SUCCESS);

        case 'V':               // version number
            cout << program_name << " version "
                 << APP_VERSION_STRING
                 << " (build " << APP_VERSION_BUILD << ")\\n\\n"
                 << "Built by " << APP_BUILDER
                 << " in " << APP_BUILD_HOST << ':' << APP_BUILD_PATH
                 << " on " << APP_BUILD_TIME << endl << endl;
            exit(EXIT_SUCCESS);

        case 'v':               // verbose mode
            verbose_mode = true;
            break;

        case '?':
        default:
            usage();
            exit(EXIT_FAILURE);
        }
    }

    if (optind != argc - 1) {
        usage();
        exit(EXIT_FAILURE);
    }

"""

post_templates['c++main'] = """
    exit(EXIT_SUCCESS);
}
"""


pre_templates['python'] = """#!/usr/bin/env python3
\"\"\"

<<<PROGRAM DESCRIPTION>>>

\"\"\"

import sys
import argparse
import logging

try:                            # nice-to-have but not critical
    import colorlogger
except ImportError:
    pass


__version__ = "1.0"


def main(args):
    \"Main entry point.\"

    # YOUR CODE GOES HERE
    print(args)
"""

post_templates['python'] = """


def _parse_args():
    "Parse command line args."

    parser = argparse.ArgumentParser(
        description=globals()["__doc__"],
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-D", "--debug", action="store_true",
                        dest="debug_mode", default=False,
                        help="debug mode")
    parser.add_argument("-v", "--verbose", action="store_true",
                        dest="verbose_mode", default=False,
                        help="verbose mode")
    parser.add_argument("--version", action="version",
                        version="%(prog)s {version}".format(version=
                                                            __version__))
    parser.add_argument("args", type=str, nargs="*",
                        help="Arguments to the program")
    return parser.parse_args()


if __name__ == "__main__":
    OPTIONS = _parse_args()

    if OPTIONS.debug_mode:
        logging.basicConfig(level=logging.DEBUG,
                            format="%(levelname)s: %(message)s")
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s")

    try:
        main(OPTIONS)
        sys.exit(0)

    except KeyboardInterrupt as exc:  # Ctrl-C
        raise exc


# Local Variables:
# compile-command: "pylint -r n @@@filename@@@"
# end:
"""

pre_templates['bash'] = """#!/bin/bash

#


readonly program_name=${0##*/}
readonly program_version=0.1

shopt -s failglob               # fail upon non-matched globs
#set -e                          # abort on first error
set -u                          # disallow undefined variables
set -o pipefail                 # fail the pipe if one component fails


usage() {
    echo "
    Usage:  ${program_name}  [options]

${program_name}


${program_name} supports the following options:

    -L <log_file>             - append log messages to log file.
    -d                        - debug mode.
    -v                        - verbose operation.
    -V                        - display program version.
    -h                        - display this message.

"
}


log() {
    local tag=${log_tag:-${program_name}}

    if [[ -n $log_file ]]; then
        echo "[$(date +"%Y/%m/%d %H:%M:%S %z")] [$tag] $*" >> $log_file
    else
        echo "$@"
    fi
}


verbose() {
    if [[ -n $verbose_mode ]]; then
        echo "$@"
    fi
}


debug() {
    if [[ -n $debug_mode ]]; then
        echo "$@"
    fi
}


error() {
    echo -e "${color_red}${program_name}: ERROR:" "$@" "${color_none}" >&2
}


fatal() {
    error "$@"
    exit 1
}


warning() {
    echo -e "${color_yellow}${program_name}: WARNING:" "$@" "${color_none}" >&2
}


notice() {
    echo -e "${color_cyan}${program_name}: NOTICE:" "$@" "${color_none}" >&2
}


cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}


setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    color_none='\033[0m' color_red='\033[0;31m' color_green='\033[0;32m' 
    color_orange='\033[0;33m' color_blue='\033[0;34m' color_purple='\033[0;35m'
    color_cyan='\033[0;36m' color_yellow='\033[1;33m'
  else
    color_none='' color_red='' color_green='' color_orange='' color_blue='' 
    color_purple='' color_cyan='' color_yellow=''
  fi

  readonly color_none color_red color_green color_orange color_blue \\
    color_purple color_cyan color_yellow
}


setup_colors

# parse options

verbose_mode=""
debug_mode=""
log_file=""
log_tag=""

while getopts ":dhL:Vv" opt; do
    case $opt in
        d)
            debug_mode=1
            set -o errtrace
            ;;

        h)
            usage
            exit 0
            ;;

        L)
            log_file=${OPTARG}
            ;;

        V)
            echo "${program_name} version ${program_version}"
            exit 0
            ;;

        v)
            verbose_mode=1
            ;;

        :)
            fatal "option '-${OPTARG}' requires an argument"
            ;;

        \?)
            fatal "unknown option: '-${OPTARG}'"
            ;;
    esac
done

readonly verbose_mode

shift $((OPTIND-1))

if [[ $# -ne 1 ]]; then
    usage
    exit 1
fi

"""

post_templates['bash'] = "\n"


def expand_macros(s, filename):
    "Expand macros in the input stream"

    cpp_name = re.sub(r'[\s+\.\$\+\-]+', '_', filename)
    s = re.sub(r'@@@filename@@@', filename, s)
    s = re.sub(r'@@@cppname@@@', cpp_name, s)
    s = re.sub(r'@@@ucppname@@@', cpp_name.upper(), s)
    return s


usage_string = """Usage:  %prog  [options]  <file>

%prog creates or adds a generic boilerplate code to the source file specified.
Unless mode is specified (see '-m' flag), %prog makes an attempt to
guess the language mode from the filename.
By default, %prog creates a new file with the skeleton and fails if the
file already exists. To instrument an already existing file, use '-i' flag.

%prog supports the following templates:

bash         - bash script
perl         - perl script
python       - python script
c            - generic C file
h            - generic C header file
c++          - C++ file
h++          - C++ header file
cmain        - main driver for a C program
c++main      - main driver for a C++ program

%prog is free software under the terms of the BSD License.
"""


prog = os.path.basename(sys.argv[0])
program_version = 2.0
version_string = "%%prog  %s" % program_version

logging.basicConfig(format=prog +
                    ": %(levelname)s: %(message)s")


# parse command-line options

parser = OptionParser(usage=usage_string,
                      version=version_string)
parser.add_option("-f", "--force", help="Instrument existing file",
                  action="store_true", dest="force")
parser.add_option("-m", "--mode",
                  help="Language mode",
                  metavar="MODE", dest="mode")

(options, args) = parser.parse_args()

logging.getLogger().setLevel(logging.INFO)

if len(args) != 1:
    parser.print_help()
    sys.exit()

fname = args[0]

if os.path.isfile(fname) and not options.force:
    logging.error("Will not instrument existing file (use '-f' to force)")
    sys, exit(1)


# sense mode

if not options.mode:
    suff = os.path.splitext(fname)[1]

    if not suff:
        logging.fatal("cannot figure out file language (use '-m')")
        sys.exit(1)

    mode = {
        '.sh': 'bash',
        '.pl': 'perl',
        '.py': 'python',
        '.c': 'c',
        '.h': 'h',
        '.cpp': 'c++',
        '.cxx': 'c++',
        '.cc': 'c++',
        '.hpp': 'h++',
        '.hxx': 'h++'
    }.get(suff, None)

    if not mode:
        logging.fatal("cannot figure out file language (use '-m')")
        sys.exit(1)
else:
    mode = options.mode


if not mode in pre_templates:
    logging.fatal("no template defined for mode %s" % mode)
    sys.exit(1)


short_name = os.path.basename(fname)
out_file = fname

with open(out_file, 'w') as fout:
    fout.write(expand_macros(pre_templates[mode], short_name))

    if options.force:
        with open(fname, 'r') as fin:
            for line in fin:
                fout.write(line)

    fout.write(expand_macros(post_templates[mode], short_name))


if options.force:
    bkp = fname + ".BAK"
    os.unlink(bkp)
    shutil.move(fname, bkp)
    shutil.move(out_file, fname)

sys.exit()
